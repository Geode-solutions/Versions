name: Ecosystem branch check (Python)

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        required: true

concurrency:
  group: ${{ inputs.branch }}
  cancel-in-progress: true

jobs:
  validate-PRs:
    uses: Geode-solutions/Versions/.github/workflows/validate-pr.yml@master
    with:
      branch: ${{ inputs.branch }}
      repos: "OpenGeodeWeb-Back;Vease-Back"
    secrets: inherit

  wheels:
    needs: validate-PRs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    outputs:
      path: ${{ steps.repos.outputs.path }}
    steps:
      - uses: Geode-solutions/actions/get-release@master
        id: repos
        with:
          repository: ${{ needs.validate-PRs.outputs.repos }}
          file: ".whl"
          token: ${{ secrets.TOKEN }}
          branch: ${{ inputs.branch }}
          base: ${{ needs.validate-PRs.outputs.base }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-$${{ runner.os }}
          path: .

  test:
    needs: [validate-PRs, wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        repo: ${{ fromJSON(needs.validate-PRs.outputs.repos_array) }}
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/download-artifact@v4
        with:
          name: wheels-$${{ runner.os }}
      - name: Clone repository
        run: |
          gh auth setup-git
          gh api https://api.github.com/repos/Geode-solutions/open-license-manager/contents/projects/geode/geode.lic -H "Accept: application/vnd.github.raw" > geode.lic
          gh repo clone Geode-solutions/${{ matrix.repo }}
          cd ${{ matrix.repo }}
          if git ls-remote --exit-code --heads origin ${{ inputs.branch }}; then
            echo "found branch ${{ inputs.branch }}"
            git checkout origin/${{ inputs.branch }}
          else
            git checkout origin/${{ needs.validate-PRs.outputs.base }}
          fi
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
      - name: Install dependencies
        run: |
          cd ${{ matrix.repo }}
          pip install -r requirements.txt
          wheels=$(echo "${{ needs.wheels.outputs.path }}" | sed 's/\;/\ /g')
          echo $wheels
          if [ -n "$wheels" ]; then 
            pip install --no-deps $wheels
          fi
        shell: bash
      - name: Run tests
        run: |
          cd ${{ matrix.repo }}
          pip install pytest
          pytest
        shell: bash
        env:
          GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
      # - name: Post to a Slack channel
      #   if: failure()
      #   id: slack
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     channel-id: C0598GTCLGH
      #     slack-message: "${{ inputs.branch }}: Python merge request failed for ${{ matrix.repo }} on ${{ runner.os }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # windows:
  #   needs: validate-PRs
  #   runs-on: windows-latest
  #   outputs:
  #     path: ${{ steps.repos.outputs.path }}
  #   steps:
  #     - uses: Geode-solutions/actions/get-release@master
  #       id: repos
  #       with:
  #         repository: ${{ needs.validate-PRs.outputs.repos }}
  #         file: "-win64-private.zip"
  #         token: ${{ secrets.TOKEN }}
  #         branch: ${{ inputs.branch }}
  #         base: ${{ needs.validate-PRs.outputs.base }}
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: windows
  #         path: .

  # windows-test:
  #   needs: [validate-PRs, windows]
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       repo: ${{ fromJSON(needs.validate-PRs.outputs.repos_array) }}
  #     fail-fast: false
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: windows
  #     - name: Libraries
  #       id: libraries
  #       run: |
  #         $old_path = "${{ needs.windows.outputs.path }}"
  #         $bin_path = $old_path.replace(";", "\bin;").replace("\","/") + "/bin"
  #         echo "bin=$bin_path" >> $env:GITHUB_OUTPUT
  #         $share_path = $old_path.replace(";", "\share;").replace("\","/") + "/share"
  #         echo "share=$share_path" >> $env:GITHUB_OUTPUT
  #     - uses: TheMrMilchmann/setup-msvc-dev@v3
  #       with:
  #         arch: x64
  #     - name: Compile & Test
  #       run: |
  #         gh auth setup-git
  #         gh api https://api.github.com/repos/Geode-solutions/open-license-manager/contents/projects/geode/geode.lic -H "Accept: application/vnd.github.raw" > geode.lic
  #         gh repo clone Geode-solutions/${{ matrix.repo }}
  #         cd ${{ matrix.repo }}
  #         if git ls-remote --exit-code --heads origin ${{ inputs.branch }}; then
  #           echo "found branch ${{ inputs.branch }}"
  #           git checkout origin/${{ inputs.branch }}
  #         else
  #           git checkout origin/${{ needs.validate-PRs.outputs.base }}
  #         fi
  #         mkdir -p build
  #         cd build
  #         cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH="${{ needs.windows.outputs.path }}" ../tests
  #         IFS=";" read -a paths <<< "${{ steps.libraries.outputs.bin }}"
  #         for path in "${paths[@]}"
  #         do
  #           if [[ -d $path ]]; then
  #             cp $path/* bin
  #           fi
  #         done
  #         mkdir share
  #         IFS=";" read -a shares <<< "${{ steps.libraries.outputs.share }}"
  #         for share in "${shares[@]}"
  #         do
  #           if [[ -d $share ]]; then
  #             cp -r $share/* share
  #           fi
  #         done
  #         cmake --build .
  #         ctest --output-on-failure --no-tests=error -j 2 -LE unstable
  #       env:
  #         GEODE_LICENSE_LOCATION: ${{ github.workspace }}/geode.lic
  #         GITHUB_TOKEN: ${{ secrets.TOKEN }}
  #       shell: bash
  #     - name: Post to a Slack channel
  #       if: failure()
  #       id: slack
  #       uses: slackapi/slack-github-action@v1
  #       with:
  #         channel-id: C0598GTCLGH
  #         slack-message: "${{ inputs.branch }}: C++ merge request failed for ${{ matrix.repo }} on Windows\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # merge-PRs:
  #   needs: [linux-test, windows-test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.TOKEN }}
  #         script: |
  #           const repos = "${{ needs.validate-PRs.outputs.repos }}"
  #           const owner = 'Geode-solutions'
  #           const branchName = "${{ inputs.branch }}"
  #           const testReleasePattern = `${branchName}-tag`
  #           for(const repo of repos.split(';')) {
  #             console.log(repo)
  #             const prs = await github.rest.pulls.list({
  #               owner,
  #               repo,
  #               state: 'open'
  #             })
  #             const branch_pr = prs.data.find(pr => pr.head.ref == "${{ inputs.branch }}")
  #             if (!branch_pr) {
  #               continue
  #             }
  #             const pull_number = branch_pr.number
  #             console.log(`Merging PR #${pull_number}, for branch ${branch_pr}, in repo ${repo}`)
  #             await github.rest.pulls.merge({
  #               owner,
  #               repo,
  #               pull_number
  #             })
  #             console.log(`Deleting test releases in ${repo}...`)
  #             const releases = await github.paginate(github.rest.repos.listReleases, {
  #             owner,
  #             repo
  #             })
  #             for (const release of releases) {
  #               if (release.tag_name === testReleasePattern) {
  #                 console.log(`Deleting release: ${release.name} (ID: ${release.id})`)
  #                 await github.rest.repos.deleteRelease({
  #                   owner,
  #                   repo,
  #                   release_id: release.id
  #                 })
  #                 console.log(`Deleting tag: ${release.tag_name}`)
  #                 await github.rest.git.deleteRef({
  #                   owner,
  #                   repo,
  #                   ref: `tags/${release.tag_name}`
  #                 })
  #               }
  #             }
  #           }

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [merge-PRs, validate-PRs]
  #   steps:
  #     - uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.TOKEN }}
  #         script: |
  #           github.rest.actions.createWorkflowDispatch({
  #             owner: 'Geode-solutions',
  #             repo: 'Versions',
  #             workflow_id: 'deploy.yml',
  #             ref: 'master',
  #             inputs: { branch: '${{ needs.validate-PRs.outputs.base }}' }
  #           })
  #     - name: Post to a Slack channel
  #       id: slack
  #       uses: slackapi/slack-github-action@v1
  #       with:
  #         channel-id: C0598GTCLGH
  #         slack-message: "Merge request for ${{ inputs.branch }} complete :tada:"
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
