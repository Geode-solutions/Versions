name: version

on:
  schedule:
    - cron: 0 2 * * *

jobs:
  run:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.data.outputs.json }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.TOKEN }}
    - uses: actions/github-script@v6
      id: data
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          const data = require('./versions.json')
          console.log(data)
          let results = [];
          for (const info of data) {
            const {repo, pypi} = info
            console.log('Looking for repository:', repo);
            const wf = await github.rest.actions.listWorkflowRunsForRepo({owner: context.repo.owner, repo, per_page: '1', event: 'schedule'})
            console.log(wf);
            const conclusion = wf.data.workflow_runs[0].conclusion;
            console.log(conclusion);
            if (conclusion != 'success') {
              core.setFailed('Last schedule does not work: ' + repo);
              return;
            }
            const release = await github.rest.repos.getLatestRelease({owner: context.repo.owner, repo});
            const version = release.data.tag_name.substring(1);
            console.log(release.data.tag_name);
            results.push({repo, pypi, version});
          }
          console.log("results",results)
          const json = JSON.stringify(results.sort(), null, 2)
          console.log(json);
          core.setOutput("json", json);
          const fs = require('fs')
          fs.writeFile('versions.json', json, (err) => {
            if (err) throw err;
            console.log('The file has been saved!');
          })
    - uses: stefanzweifel/git-auto-commit-action@v4
      id: commit
      with:
        commit_message: Apply version changes
    - name: "Run if changes have been detected"
      if: steps.commit.outputs.changes_detected != 'true'
      run: exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: run
    strategy:
      matrix:
        python: [{version: "3.7", tag: "cp37-cp37m"}, {version: "3.8", tag: "cp38-cp38"}, {version: "3.9", tag: "cp39-cp39"}, {version: "3.10", tag: "cp310-cp310"}]
        os: ["manylinux2014_x86_64", "win_amd64"]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.TOKEN }}
    - uses: actions/github-script@v6
      env:
        data: ${{needs.run.outputs.data}}
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          const { execSync } = require("child_process");
          console.log(process.env)
          console.log(process.env.data)
          const data = JSON.parse(process.env.data)
          console.log(data)
          for (const info of data) {
            const {pypi, version} = info
            const response = await fetch("https://pypi.org/pypi/"+pypi+"/json")
            if (!response.ok) {
                throw new Error(`Error! status: ${response.status}`);
           }
            const result = await response.json(); 
            const versions = Object.keys(result.releases)
            console.log(versions)
            console.log(version)
            console.log(versions.includes(version))
            let commandOne = "pip download --no-deps --platform ${{ matrix.os }} --python-version ${{ matrix.python.version }} " + pypi + "==" + version
            let commandTwo = "mkdir " + pypi + " && cd " + pypi
            let commandThree = "unzip '../" + pypi + "-${{ matrix.python.tag }}-${{ matrix.os }}.whl' && ls"
            execSync(`${commandOne} && ${commandTwo} && ${commandThree}`, {stdio: 'inherit'})
          }
