name: version

on:
  push:
  schedule:
    - cron: 0 2 * * *

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.TOKEN }}
    - uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          const data = require('./versions.json')
          console.log(data)
          let results = [];
          for (const info of data) {
            const {repo, pip} = info
            console.log('Looking for repository:', repo);
            const wf = await github.rest.actions.listWorkflowRunsForRepo({owner: context.repo.owner, repo, per_page: '1', event: 'schedule'})
            console.log(wf);
            const conclusion = wf.data.workflow_runs[0].conclusion;
            console.log(conclusion);
            if (conclusion != 'success') {
              core.setFailed('Last schedule does not work: ' + repo);
              return;
            }
            const release = await github.rest.repos.getLatestRelease({owner: context.repo.owner, repo});
            const version = release.data.tag_name.substring(1);
            console.log(release.data.tag_name);
            results.push({repo, pip, version});
          }
          console.log("results",results)
          const json = JSON.stringify(results.sort(), null, 2)
          console.log(json);
          const fs = require('fs')
          fs.writeFile('versions.json', json, (err) => {
            if (err) throw err;
            console.log('The file has been saved!');
          })
    - uses: stefanzweifel/git-auto-commit-action@v4
      id: commit
      with:
        commit_message: Apply version changes
    - name: "Run if changes have been detected"
      if: steps.commit.outputs.changes_detected != 'true'
      run: exit 1
    - uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.TOKEN }}
        script: |
          const data = require('./versions.json')
          console.log(data)
          for (const info of data) {
            const {pip, version} = info
            const response = await fetch("https://pypi.org/pypi/"+pip+"/json").json()
            console.log(response)
            const versions = Object.keys(response.releases)
            console.log(versions)
            console.log(version)
            console.log(versions.includes(version))
          }
